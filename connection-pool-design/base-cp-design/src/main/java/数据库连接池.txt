TODO. 为什么使用数据库连接池 ?
一个数据库连接对象对应一个物理数据库连接，创建和释放数据库连接是一个耗性能的操作
使用连接池能够减少连接创建的时间，优化对于数据库资源的使用

TODO. 数据库连接池基本逻辑 ?
- 在系统初始化的时候，将数据库连接作为对象存储在内存中
- 连接池管理数据库连接的建立，断开，初始连接数、连接的上下限数、每个连接的最大使用次数、最大空闲时间..
- 用户需要访问数据库时，从连接池中取出一个已建立的空闲连接对象，使用完毕后是将连接放回连接池中
- 如果数据库连接池对象中没有空闲的连接，且连接数没有达到最大(最大活跃连接数)，创建一个新的数据库连接

1. 多线程并发问题:
   线程池服务于多线程，通常线程池中连接的数量不能低于并发数量的两倍
   线程池中连接的数量也取决于机器性能CPU + Disk + networking等
   同一个线程在执行期间内，只当需要操作DB时才从连接池获取Connection
2. 多数据库服务器:
   针对不同数据库的创建不同的连接池，使用不同的配置
   不同类型的数据库对于连接的控制以及Session的并发设置有所区别
3. 连接池资源泄露: 从连接池中获取的连接必须保证Close，否则造成连接泄露
4. 连接池核心参数: 重要的核心参数需要根据项目运行场景而定
5. 性能和可靠性: 必须具有(网络中断)自动重连的功能, 设置超时定期回收连接

TODO. 连接池Monitoring ? 线程池运行日志可以判断连接的分配
1. 监测连接池中连接的使用情况和闲置情况 ?
2. 判断那些线程占用数据库连接? 那些线程占用了不止一个连接?
3. 如何监测事务的提交量(单位时间的commits数量影响插入的效率) ?


开源数据库连接池: C3P0, Proxool, DBCP, BoneCP, Druid
第三方数据库连接池: commons-dbcp2, HikariCP, hibernate, mybatis, Tomcat Pool
https://github.com/brettwooldridge/HikariCP