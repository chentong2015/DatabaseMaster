TODO: 为什么要禁止多表使用join? 如果join查询没有写好，根据底层表关联的算法，导致运算量非常庞大
MySQL表关联常见的两种算法
1. Nested Loop Join
   从一张表(驱动表)循环读行，然后根据关联字段从另外一张表(被驱动表)提取满足的行，然后取出两个表的结果合集
2. Block Nested Loop Join
   把原始驱动表的数据读取到join_buffer中，然后扫描被驱动表，从被驱动表中提取每一行和join_buffer中的数据对比

-----------------------------------------------------------------------------------------------
对于有用户界面的Application, 需要解决以下问题
1. Datasource该如何设计，类型如何访问data source，何时Open&Close ?
2. 如何在执行数据库操作的时候，避免UI阻塞 ?
3. 如何执行数据的刷新操作，将数据结果返回给用户 ?

解决方案 1.
1. 一般Datasource应使用Singleton pattern单列模型, 只创建一个DB的instance对象
2. 类型可以通过调用指定的方法获取instance, 然后调用对象的方法
3. 一般在启动时Open Connection获取数据, 在UI完全显示出来后加载; 如果open失败，则不显示UI
4. 一般在关闭Application时Close Connection 关闭数据库的连接

解决方案 2.
使用异步线程来处理背后耗时的操作, 获取和加工数据
UI界面应该给用户提示背后的运行进度

解决方案 3.
可以使用Controller / Data binding来加载和渲染数据新时，需要确定Database的数据得到更新之后，
保持UI和Database的数据同步性，在UI执行数据更才刷新UI界面的数据 !!
需要更新Database中一切相关的数据，可能执行Transaction
