数据库连接池设计原理 ?
- 在系统初始化的时候，将数据库连接作为对象存储在内存中
- 连接池管理数据库连接的建立，断开，初始连接数、连接的上下限数、每个连接的最大使用次数、最大空闲时间..
- 用户需要访问数据库时，从连接池中取出一个已建立的空闲连接对象，使用完毕后是将连接放回连接池中
- 如果数据库连接池对象中没有空闲的连接，且连接数没有达到最大(最大活跃连接数)，创建一个新的数据库连接

如何设计数据库连接池 ? 需要考虑哪些问题 ?
1. 并发问题: 多线程争抢连接池中连接资源
2. 多数据库服务器和多用户: 创建针对不同数据库的连接池
3. 事务处理: Connection需要保证事务
4. 连接池的分配与释放: 设置空闲池和timeout来存放和管理connection的分配
5. 连接池的配置与维护: 连接池参数的配置需要根据系统而定
6. 性能和可靠性: 必须具有(网络中断)自动重连的功能, 设置超时时间定期回收连接
7. 线程池资源的泄露问题: 算法需要保证释放线程池对象
   PooledObject pooledObject = ConnectionPool.getPooledObject();
   try(Connection connection = pooledObject.getConnection()) {
      // do transaction with connection
   } catch (Exception exception) {
      // log error message
   } finally {
      ConnectionPool.freePooledObject(pooledObject);
   }

Java的开源数据库连接池:
C3P0、Proxool、DBCP、BoneCP、Druid

数据库连接池的实现:
- org.apache.commons.dbcp2.BasicDataSource
- Hibernate源码
- Mybatis持久层框架
1. 如何判断那些线程占用了数据库连接? 那些线程占用了不止一个连接 ?
2. 如何验证连接池中所有连接的Transaction事务都正常关闭了 ?