Hibernate 3.x 版本的创建
   Configuration configuration = new Configuration().configure();
   SessionFactory sessionFactory = configuration.buildSessionFactory();
   Session session = sessionFactory.openSession();

Hibernate 4.x 版本的创建: 提供属性配置的参数
   Configuration configuration = new Configuration().configure();
   Properties properties = new Properties();
   properties.put(key, value);
   StandardServiceRegistry standardServiceRegistry = new StandardServiceRegistryBuilder()
      .applySettings(properties)
      .build();
   SessionFactory sessionFactory = configuration.buildSessionFactory(standardServiceRegistry);

   // 使用Configuration和DataSource来完整构建
   // 对于Hibernate新版本ServiceRegistryBuilder废弃，使用StandardServiceRegistryBuilder来替代
   private void initSessionFactory(Configuration configuration, DataSource dataSource) {
       Thread.currentThread().setContextClassLoader(DataAccessComponent.class.getClassLoader());
       ServiceRegistry serviceRegistry = new ServiceRegistryBuilder()
               .applySettings(configuration.getProperties())
               .applySetting(Environment.DATASOURCE, dataSource)
               .applySetting(Environment.DIALECT_RESOLVERS, CustomDialectResolver.class.getName())
               .buildServiceRegistry();
       try {
           sessionFactory = configuration.buildSessionFactory(serviceRegistry);
       } catch (Exception e) {
           throw new Exception("Unable to connect to Database");
       }
   }

Hibernate 5.x 版本之后的创建: 从元信息中获取Session工厂
   1. 简单方式
    StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure().build();
    SessionFactory sessionFactory = new MetadataSources(registry).buildMetadata().buildSessionFactory();

   2. 复杂方式: 支持自定义配置Properties, MetadataSources提供丰富的Metadata源数据注入
    this.bootstrapServiceRegistry = new BootstrapServiceRegistryBuilder().applyClassLoader(classLoader).build();
    this.standardServiceRegistryBuilder = new StandardServiceRegistryBuilder(bootstrapServiceRegistry);
    if (configFile != null) {
       standardServiceRegistryBuilder.configure(configFile);
       properties.putAll(standardServiceRegistryBuilder.getSettings());
    }
    standardServiceRegistryBuilder.applySettings(properties);
    StandardServiceRegistry standardServiceRegistry = standardServiceRegistryBuilder.build();

    MetadataSources metadataSources = new MetadataSources();
    MetadataBuilder metadataBuilder = metadataSources.getMetadataBuilder(standardServiceRegistry);

    Metadata metadata = metadataBuilder.build();
    SessionFactory sessionFactory1 = metadata.buildSessionFactory();

