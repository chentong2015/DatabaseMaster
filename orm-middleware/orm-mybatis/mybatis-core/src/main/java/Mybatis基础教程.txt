iBatis: Google 2001年发起的开放源代码项目, 一个基于Java的持久层框架, 2010 Apache软件基金会退役
MyBatis: 持久层框架，它支持自定义SQL、存储过程以及高级映射

1. 提供SQL和DAO(Objects实体类)之间映射, 省掉了相同功能的JDBC很多代码
2. MyBatis作为"半自动化"的ORM实现, 需要写SQL, 增加了程序的灵活性
3. MyBatis功能不够完整，没有办法自动生成数据库表之间的"关联关系"

TODO: 两种实现方式"基于XML映射(优先级更高，代码会先判断inputStream)"或者"Java注解" !!
1. SqlSessionFactoryBuilder:
   通过xml配置或者java程序两种方式.build()出SqlSessionFactory，一次实例化之后直接关闭
2. SqlSessionFactory:
   应用内保持唯一(单例模式或者静态单例模式)，负责SqlSession的创建
3. SqlSession:
   每个线程都有独立的SqlSession实例，负责映射语句的调用和执行
   3.1 一般使用try-resource声明, 保证所有数据库资源都能被正确地关闭
   3.2 不能将SqlSession实例的引用放在一个类的静态域，或者类型的托管作用域中
   3.3 使用Web框架, 应该将SqlSession放在和HTTP请求相似的作用域中, 收到请求时打开, 返回响应后关闭
   TODO: DefaultSqlSession不是线程安全的, 需要使用在方法作用域层面method scope
4. Mapper:
   映射器接口实例是从SqlSession中获得的, 最好放在方法作用域内, 映射器实例并不需要被显式地关闭
   MyBatis创建结果对象的新实例时, 它都会使用对象工厂(ObjectFactory)实例来完成实例化工作

${}和#{}的区别
1. ${}是字符串替换，直接把${}替换成变量的值，调用.createStatement()
2. #{}是预编译(防止SQLz注入)替换成?，调用.prepareStatement(query)来赋值