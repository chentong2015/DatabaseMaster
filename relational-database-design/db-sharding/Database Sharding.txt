TODO. 分库分表实战场景 > 优化关系型数据库的存储和访问
由于Server使用时间较长，LOG日志表长期存储软件使用的日志信息
导致单表数据量过大(36M rows)，导致查询和更新时间增加，服务性能降低

InnoDB存储引擎底层使用B+树来组织数据，这个会导致B+树的高度增加，存储和查询数据性能降低

分库分表的两种形式
  垂直拆分(Vertically):
  指按功能模块拆分，比如分为订单库、商品库、用户库，多个数据库之间表结构不同
  每个库的结构都不同，但是至少有一列是一致的，综合起来就是数据的全集
  > 优点: 业务清晰，利于维护
  > 缺点: TODO: 如果单表的数据量大，读写压力依然很大，性能没有本质的提升
         / 业务可能会影响到数据库的瓶颈
         / 部分业务无法关联，join需要通过java程序去调用(分库中的冗余数据造成数据一致性问题)

  水平拆分(Horizontally):
  将同一个表的数据进行"分块"保存到不同数据库中，这些数据库中表结构完全相同
  每个库的结构一致，数据不同，综合起来就是数据的全集，水平拆分需要保证均衡性
  > 优点: TODO: 单库可以保证数据的降低，数据被平分
         / 提高了负载能力，增加了高可用
         / 数据表的结构一致，程序适配性高 ==> 适用于项目进行到一定程度
  > 缺点: 数据的扩容有难度，维护量大 ==> 不方便hash均衡，负载均衡
         / 拆分规则很难抽象出来
         / 部分业务无法关联，join需要通过java程序去调用(库中放置的数据的是一类的数据)

分库分表造成的问题
  分布式事务: 操作分布式的数据库，执行操作 ==> acid 无法保证跨库的事务
  跨库的join查询
  分布式自增全局唯一id(雪花算法，Redis)
  增加开发成本