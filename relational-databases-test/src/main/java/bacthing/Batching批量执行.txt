TODO. Batching allows to send multiple statements in one-shot, saving socket stream flushing.
      将要执行的数据全部放到一个batch批次中执行，只请求一次数据库Server
一个batch一批的操作只是针对一个table，换一个table操作，则会执行新的batch
JDBC has long been offering support for DML statement batching.
By default, all statements are sent one after the other, each one in a separate network round-trip.

TODO. Statement执行完Batch之后，将会返回一个受影响行数的数组统计
int[] executeBatch() throws SQLException;
  Submits a batch of commands to the database for execution and if all commands execute successfully,
  returns an array of update counts. The int elements of the array that is returned are ordered to
  correspond to the commands in the batch, which are ordered according to the order in which they were added to the batch.

  The elements in the array returned by the method executeBatch may be one of the following:
  1. A number greater than or equal to zero
     indicates that the command was processed successfully
     and is an update count giving the number of rows in the database that were affected by the command's execution
  2. A value of Statement.SUCCESS_NO_INFO=-2
     indicates that the command was processed successfully but that the number of rows affected is unknown
     If one of the commands in a batch update fails to execute properly, this method throws a BatchUpdateException,
     and a JDBC driver may or may not continue to process the remaining commands in the batch.
     However, the driver's behavior must be consistent with a particular DBMS, either always continuing to process commands or never continuing to process commands.
     If the driver continues processing after a failure, the array returned by the method BatchUpdateException.getUpdateCounts will contain as many elements
     as there are commands in the batch, and at least one of the elements will be the following:
  3. A value of Statement.EXECUTE_FAILED=-3
     indicates that the command failed to execute successfully and occurs only if a driver continues to process commands after a command fails

Sybase: executeBatch() will always return 1
Oracle: executeBatch() will always return 1
   批量插入不会合并command, 导致返回的受影响数目使用为1
Postgresql: executeBatch() will return the value -2 or 1
   Postgresql批量插入的执行策略:
   根据执行的数量动态划分command, 合并后的command成功执行后将会返回SUCCESS_NO_INFO的状态
   最后一个执行的statement可能为single update;直接返回正确的影响行数