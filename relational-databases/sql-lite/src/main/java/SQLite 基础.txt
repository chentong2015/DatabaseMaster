DB Browser for SQLite 数据库GUI用户操作界面(前端)

SQLite特点:
1. 轻量级，适配性高，可设计成嵌入APP的数据库
2. 非Client-server模式，运行在同一台机器上
3. 注意大小限制和约束 https://www.sqlite.org/limits.html

SQLite command line: 安装命令行工具，将路径添加到环境PATH
> sqlite3 demo.db 创建数据库/打开指定的DB
> .headers on | off 显示table titles列名称
> .backup demobackup 备份表, 提供要备份的数据库，和备份之后的名称
> .restore demobackup 恢复备份，还原之前的数据
> .tables 显示数据库中所有的table
> .schema 显示table的声明信息, +tableName 只显示指定的table
> .dump 将数据库信息备份出来(成code)
> .quit / .exit 退出sqlite命令提示行

> create table contacts (name text, phone integer, email text); 支持全大写的指令形式
> insert into contacts (name, phone, email) values ('chen', 12345, 'chen@gmail.com'); 单引号和双引号都可，一般使用双引号包含单引号
> insert into contacts values ("tong", 65432, "chen@gmail.com"); 默认提供全部的列的信息
> delete from contacts where phone=12345; 不提供判断条件，将删除
> update contacts set name="chen01" where phone=12345 不提供判断条件，将全部更新
> select * from contacts where name="tong";
> select name from contacts; 分号是作为statement指令声明的结束标识, 允许多行sql
> select * from contacts order by name, email collate nocase DESC; 先name, 然后email排序, 忽略大小写进行排序, ASC, DESC
> select count(*) from contacts; 使用公式
> select distinct ... / select count(DISTINCT title) ... 不重复计算指定的列标签

Primary key: unique, not null, auto-increment 默认是自动的增加的(区别Sql Server需要指定该属性), select时会自定的根据key来排序
Not null: 使行的信息有意义，而不可缺失的信息


View视图: Virtual table
1. 存储query之后的数据, 然后再使用, 可以有效的透视数据，避免每次执行多余的操作, 或者避免show出一下table的信息 !!
2. 原始table中的数据变化会自动体现在view视图上
3. Sqlite中不可修改Views中的数据, 可以如table一样进行查询
4. 在创建View时，对于重合的名称，会默认添加区别 !! 需要自定义设置 AS
>    CREATE VIEW artist_list AS
>    SELECT artist.name AS artist, albums.name AS album, songs.track, songs.title
>    FROM songs INNER JOIN albums ON songs.album = albums._id
>               INNER JOIN artists ON albums.artist = artists._id
>    ORDER BY artist.name, albums.name, songs.track;
.
>    SELECT * FROM artist_list; 像table一样使用view视图
>    SELECT * FROM artist_list WHERE name like "test%";
>    DROP VIEW artist_list; 删除VIEW视图, 不会对DB中的table数据造成影响 !!


Join 表之间的链接:一共有7种具体形式, 默认是inner join
可以选择双表组合titles中的任何列信息(自定义顺序), 如果有相同名称，需要指明table信息
> SELECT songs.track, songs.title, albums.name
> FROM songs JOIN albums
> ON songs.album = albums._id; 两个表link匹配信息
.
> SELECT artist.name, albums.name, songs.track, songs.title
> FROM songs INNER JOIN albums ON songs.album = albums._id
>            INNER JOIN artists ON albums.artist = artists._id
> WHERE albums.name LIKE "%doctor%" 通配符号匹配(模糊查询), like不是大小写敏感的匹配
> ORDER BY artist.name, albums.name, songs.track;
