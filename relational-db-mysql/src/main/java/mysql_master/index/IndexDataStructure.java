package mysql_master.index;

// 索引是什么：帮助MySQL高效获取数据的"排好序的数据结构"
public class IndexDataStructure {

    // 1. 二叉树: 结点存储<key, value> value存储的是磁盘文件地址
    //           不适用场景: 单边增长的二叉树，退化成链表
    // 2. 红黑树: 平衡二叉树，自旋平衡
    //           不适用场景: 大数据量，树的高度很大，找叶子结点不高效，查找一次和磁盘做一次IO交互，不可控
    // 3. Hash表: hash(key) -> Table(Entry<key,value>) --> 数组加链表存储
    //            对索引的key进行一次hash计算便可以定位出数据的位置, value存储磁盘文件地址
    //            > 仅能满足"=", "in", 不支持范围查找, 不支持范围查找
    //            > 存在hash冲突问题
    // 4. B-Tree: 控制树的高度，存储大量的数据
    //            一个结点上存储更多的元素，一个node中存(key,value)
    //            所有索引元素不重复，结点中的数据索引从左到右递增
    //                               (node, node, node, node, node ...)
    //            (node, node, node, node, node ...)      (node, node, node, node, node ...)
    //           .....                          .....                  (node, node, node, node, node ...)

    // TODO: MySQL索引底层选择的数据结构
    // 5. B+Tree: 上层的key构成的一组结点，从左到右依次递增，左子树都小，右子树都大
    //            提取叶子结点的一组元素中的第一个值，向上构成树的结构
    //            data是索引所在行的磁盘文件地址，都在叶子结点存储，叶子结点包含整张表的所有索引元素
    //            叶子结点具有指针的连接，从左到右递增，支持对范围的查找 !!
    //    B+Tree如何查找?
    //            为了提高查询的效率，一般页(根结点)是常驻内存的
    //            1. 首先将整个root根结点load到内存中RAM(访问延时约100ns)，使用二分法查找(根结点中key是排序的)
    //            2. 再加载左结点到内存中，二分法查找
    //            3. 再加载第三层的叶子结点数据
    //    B+Tree为什么能使树的高度可控?
    //            1. 默认给结点分配的大小是16KB(一页的数据)
    //               查询语句：Show global status like 'Innodb_page_size'; 查找页的大小设置
    //               8bits + 6bits@address + 8bits + 6bits@address ....  总共可以存1100个key值
    //            2. 第二层单个结点可以放1170个key值
    //            3. 第三层单个结点可以放16个(key, value)组合值
    //               全部放满叶子结点：1100 * 1100 * 16 = 千万级的key值 ===> 再往上则需要做分库分表 !!

    // TODO: 为什么非主键索引结构，叶子结点存储的是主键值? (一致性和节省存储空间)
    // 二级索引/辅助索引: 使用B+树构建和组织索引key的数据，在叶子结点位置存储(二级索引，key)
    // 联合索引   : 组合字段排好序的数据结点，(name, age, position)逐个按照字段比对进行排序
    // 最左前缀法则: 要使用联合索引，必须从前面的字段开始使用，不能跳过前面的直接使用后面的字段  ==> 判断是否走索引 !!
    //             因为联合索引的B+树的构建是根据逐个字段排号序的，后面的单个字段不是排好序的
}
